// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCManager.Data;

#nullable disable

namespace SCManager.Data.Migrations
{
    [DbContext(typeof(SCManagerDbContext))]
    [Migration("20241101093403_AddedRequestLogEntries")]
    partial class AddedRequestLogEntries
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "37152c28-98e0-4067-93eb-f708a463d91b",
                            ConcurrencyStamp = "514f4df7-f0a4-4b34-aaf8-54c4c874f824",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "c5fb4568-51c6-43ab-8050-a5642eb9ac44",
                            ConcurrencyStamp = "55309049-c467-42fd-9223-e221b7c3b61a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            RoleId = "c5fb4568-51c6-43ab-8050-a5642eb9ac44"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SCManager.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByIpAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageId")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53ea6bca-6c80-400c-9cb5-ac31d508a7f7",
                            CreatedDateTime = new DateTime(2020, 6, 1, 14, 57, 16, 395, DateTimeKind.Unspecified).AddTicks(9967),
                            Email = "scmanager_test@mail.com",
                            EmailConfirmed = true,
                            IsBanned = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "SCMANAGER_TEST@MAIL.COM",
                            NormalizedUserName = "SCMANAGER_TEST@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM9A4bvt/Ci2fC2r5Si1p2dEX8/v8/svgQqI1rqocSOUcWqgfzD8A8OGlpU/6qiZbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "UFEWI655NFJHSNPMEJBEGWHAJKHAVWIW",
                            TwoFactorEnabled = false,
                            UserName = "scmanager_test@mail.com"
                        });
                });

            modelBuilder.Entity("SCManager.Data.Models.ComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageId")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("ComponentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 9, 4, 56, 317, DateTimeKind.Utc),
                            ImageId = "ppslaiahjrh2k4epp0em",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 35, 36, 253, DateTimeKind.Utc),
                            Name = "DIAC"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 9, 19, 20, 856, DateTimeKind.Utc),
                            ImageId = "psu7wqx9un5h0ecgddwo",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 35, 31, 182, DateTimeKind.Utc),
                            Name = "Diode"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 9, 24, 55, 905, DateTimeKind.Utc),
                            ImageId = "gtspjkchcrw7mdkp3g8p",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 34, 58, 328, DateTimeKind.Utc),
                            Name = "Laser diode"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 10, 18, 36, 643, DateTimeKind.Utc),
                            ImageId = "w4f8lrhjwbjvshjvbtls",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 36, 10, 700, DateTimeKind.Utc),
                            Name = "Bipolar transistor"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 15, 2, 6, DateTimeKind.Utc),
                            ImageId = "qg5kdtsz0b3raaieupn9",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 33, 24, 429, DateTimeKind.Utc),
                            Name = "Resistor Carbon Film"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 16, 31, 944, DateTimeKind.Utc),
                            ImageId = "byl38nu7etykfflshph4",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 36, 14, 378, DateTimeKind.Utc),
                            Name = " Multilayer Ceramic Capacitor"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 39, 51, 852, DateTimeKind.Utc),
                            ImageId = "on5w03cgmaxtjdpowx6u",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 34, 25, 664, DateTimeKind.Utc),
                            Name = "Rectifier Bridge"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 41, 41, 536, DateTimeKind.Utc),
                            ImageId = "gy5xinh33xuvudsjoymt",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 32, 45, 16, DateTimeKind.Utc),
                            Name = "Rotary Potentiometer"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 43, 25, 949, DateTimeKind.Utc),
                            ImageId = "joddlvezkathultkecba",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 35, 44, 416, DateTimeKind.Utc),
                            Name = "Crystal Oscillator"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 54, 13, 960, DateTimeKind.Utc),
                            ImageId = "xia5f5av9rtuj2yjhoob",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 35, 3, 970, DateTimeKind.Utc),
                            Name = "Glass Fuse"
                        },
                        new
                        {
                            Id = 11,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 57, 27, 786, DateTimeKind.Utc),
                            ImageId = "ilwnn0qvpbgob53erzgn",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 32, 18, 600, DateTimeKind.Utc),
                            Name = "Transformer ANG"
                        },
                        new
                        {
                            Id = 12,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 58, 42, 336, DateTimeKind.Utc),
                            ImageId = "ugzoc5indiz4bmebmzev",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 34, 54, 539, DateTimeKind.Utc),
                            Name = "Push Button Switch"
                        },
                        new
                        {
                            Id = 13,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 11, 59, 54, 289, DateTimeKind.Utc),
                            ImageId = "owq3kujl3asj9as0aw0f",
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2022, 8, 25, 8, 33, 29, 600, DateTimeKind.Utc),
                            Name = "Relay"
                        });
                });

            modelBuilder.Entity("SCManager.Data.Models.ComponentTypeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("ComponentTypeDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComponentTypeId = 11,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 7, 40, 979, DateTimeKind.Unspecified).AddTicks(4689),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Input Voltage",
                            Symbol = "VAC",
                            Unit = "Volt Amper"
                        },
                        new
                        {
                            Id = 2,
                            ComponentTypeId = 11,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 8, 1, 58, DateTimeKind.Unspecified).AddTicks(9372),
                            IsActive = true,
                            IsPrimary = false,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 8, 10, 368, DateTimeKind.Unspecified).AddTicks(8734),
                            Name = "Output Voltage",
                            Symbol = "V",
                            Unit = "Volt"
                        },
                        new
                        {
                            Id = 3,
                            ComponentTypeId = 11,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 8, 39, 765, DateTimeKind.Unspecified).AddTicks(4909),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Current Rating",
                            Symbol = "A",
                            Unit = "Amper"
                        },
                        new
                        {
                            Id = 4,
                            ComponentTypeId = 8,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 9, 14, 769, DateTimeKind.Unspecified).AddTicks(5434),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Resistance",
                            Symbol = "Ω",
                            Unit = "Ohm"
                        },
                        new
                        {
                            Id = 5,
                            ComponentTypeId = 8,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 9, 44, 530, DateTimeKind.Unspecified).AddTicks(3046),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Number of Channels",
                            Symbol = "C",
                            Unit = "Count"
                        },
                        new
                        {
                            Id = 6,
                            ComponentTypeId = 5,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 10, 16, 654, DateTimeKind.Unspecified).AddTicks(2810),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Resistance",
                            Symbol = "Ω",
                            Unit = "Ohms"
                        },
                        new
                        {
                            Id = 7,
                            ComponentTypeId = 5,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 10, 31, 327, DateTimeKind.Unspecified).AddTicks(3702),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Tolerance",
                            Symbol = "%",
                            Unit = "Percents"
                        },
                        new
                        {
                            Id = 8,
                            ComponentTypeId = 5,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 10, 45, 824, DateTimeKind.Unspecified).AddTicks(6415),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Power",
                            Symbol = "W",
                            Unit = "Watt"
                        },
                        new
                        {
                            Id = 9,
                            ComponentTypeId = 5,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 10, 56, 855, DateTimeKind.Unspecified).AddTicks(3270),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Voltage Rating",
                            Symbol = "V",
                            Unit = "Volt"
                        },
                        new
                        {
                            Id = 10,
                            ComponentTypeId = 13,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 11, 22, 912, DateTimeKind.Unspecified).AddTicks(8416),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Coil Voltage",
                            Symbol = "V",
                            Unit = "Volt"
                        },
                        new
                        {
                            Id = 11,
                            ComponentTypeId = 13,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 11, 37, 726, DateTimeKind.Unspecified).AddTicks(3168),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Coil Resistance",
                            Symbol = "Ω",
                            Unit = "Ohms"
                        },
                        new
                        {
                            Id = 12,
                            ComponentTypeId = 13,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 11, 49, 814, DateTimeKind.Unspecified).AddTicks(8223),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Coil Power",
                            Symbol = "W",
                            Unit = "Watt"
                        },
                        new
                        {
                            Id = 13,
                            ComponentTypeId = 7,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 12, 19, 618, DateTimeKind.Unspecified).AddTicks(2994),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Forward Current If /AV/",
                            Symbol = "A",
                            Unit = "Ampers"
                        },
                        new
                        {
                            Id = 14,
                            ComponentTypeId = 7,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 12, 28, 309, DateTimeKind.Unspecified).AddTicks(6373),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Forward Voltage Vf Max",
                            Symbol = "V",
                            Unit = "Volt"
                        },
                        new
                        {
                            Id = 15,
                            ComponentTypeId = 12,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 12, 52, 495, DateTimeKind.Unspecified).AddTicks(1972),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Max Voltage",
                            Symbol = "V",
                            Unit = "Volts"
                        },
                        new
                        {
                            Id = 16,
                            ComponentTypeId = 12,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 13, 2, 538, DateTimeKind.Unspecified).AddTicks(1600),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Max Current",
                            Symbol = "A",
                            Unit = "Ampers"
                        },
                        new
                        {
                            Id = 17,
                            ComponentTypeId = 12,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 13, 15, 894, DateTimeKind.Unspecified).AddTicks(8340),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Mounting size",
                            Symbol = "mm",
                            Unit = "Millimeters"
                        },
                        new
                        {
                            Id = 18,
                            ComponentTypeId = 3,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 13, 57, 995, DateTimeKind.Unspecified).AddTicks(4232),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Wave Length",
                            Symbol = "mm",
                            Unit = "Millimeters"
                        },
                        new
                        {
                            Id = 19,
                            ComponentTypeId = 3,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 14, 5, 311, DateTimeKind.Unspecified).AddTicks(9404),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Power",
                            Symbol = "W",
                            Unit = "Watt"
                        },
                        new
                        {
                            Id = 20,
                            ComponentTypeId = 10,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 14, 29, 838, DateTimeKind.Unspecified).AddTicks(7786),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Voltage AC",
                            Symbol = "V",
                            Unit = "Volts"
                        },
                        new
                        {
                            Id = 21,
                            ComponentTypeId = 10,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 14, 39, 527, DateTimeKind.Unspecified).AddTicks(4307),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Current Rating",
                            Symbol = "A",
                            Unit = "Ampers"
                        },
                        new
                        {
                            Id = 22,
                            ComponentTypeId = 10,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 14, 49, 111, DateTimeKind.Unspecified).AddTicks(3104),
                            IsActive = true,
                            IsPrimary = false,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 15, 15, 984, DateTimeKind.Unspecified).AddTicks(2547),
                            Name = "Operating Temperature",
                            Symbol = "℃",
                            Unit = "Degrees"
                        },
                        new
                        {
                            Id = 23,
                            ComponentTypeId = 10,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 14, 59, 713, DateTimeKind.Unspecified).AddTicks(1836),
                            IsActive = true,
                            IsPrimary = false,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 15, 13, 370, DateTimeKind.Unspecified).AddTicks(4723),
                            Name = "Temperature /wave/",
                            Symbol = "℃",
                            Unit = "Degrees"
                        },
                        new
                        {
                            Id = 24,
                            ComponentTypeId = 2,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 15, 50, 318, DateTimeKind.Unspecified).AddTicks(9733),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Forward Current If /AV/",
                            Symbol = "A",
                            Unit = "Ampers"
                        },
                        new
                        {
                            Id = 25,
                            ComponentTypeId = 2,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 15, 57, 181, DateTimeKind.Unspecified).AddTicks(6481),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Forward Voltage Vf Max",
                            Symbol = "V",
                            Unit = "Volts"
                        },
                        new
                        {
                            Id = 26,
                            ComponentTypeId = 2,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 16, 6, 461, DateTimeKind.Unspecified).AddTicks(7533),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Number of Pins",
                            Symbol = "C",
                            Unit = "Count"
                        },
                        new
                        {
                            Id = 27,
                            ComponentTypeId = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 16, 30, 990, DateTimeKind.Unspecified).AddTicks(7588),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "I trm",
                            Symbol = "A",
                            Unit = "Ampers"
                        },
                        new
                        {
                            Id = 28,
                            ComponentTypeId = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 16, 41, 422, DateTimeKind.Unspecified).AddTicks(6665),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Vbo",
                            Symbol = "V",
                            Unit = "Volts"
                        },
                        new
                        {
                            Id = 29,
                            ComponentTypeId = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 16, 51, 77, DateTimeKind.Unspecified).AddTicks(8112),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Power",
                            Symbol = "W",
                            Unit = "Watt"
                        },
                        new
                        {
                            Id = 30,
                            ComponentTypeId = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 17, 1, 534, DateTimeKind.Unspecified).AddTicks(9713),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Number of Pins",
                            Symbol = "C",
                            Unit = "Count"
                        },
                        new
                        {
                            Id = 31,
                            ComponentTypeId = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 17, 12, 822, DateTimeKind.Unspecified).AddTicks(2673),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Body Diameter",
                            Symbol = "mm",
                            Unit = "Millimeters"
                        },
                        new
                        {
                            Id = 32,
                            ComponentTypeId = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 17, 22, 647, DateTimeKind.Unspecified).AddTicks(9152),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Mounting",
                            Symbol = "L",
                            Unit = "Leads"
                        },
                        new
                        {
                            Id = 33,
                            ComponentTypeId = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 17, 33, 654, DateTimeKind.Unspecified).AddTicks(945),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Case Style",
                            Symbol = "S",
                            Unit = "Style"
                        },
                        new
                        {
                            Id = 34,
                            ComponentTypeId = 4,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 18, 4, 647, DateTimeKind.Unspecified).AddTicks(4141),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Uceo /Max/",
                            Symbol = "V",
                            Unit = "Volts"
                        },
                        new
                        {
                            Id = 35,
                            ComponentTypeId = 4,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 18, 12, 157, DateTimeKind.Unspecified).AddTicks(717),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Ucbo",
                            Symbol = "V",
                            Unit = "Volts"
                        },
                        new
                        {
                            Id = 36,
                            ComponentTypeId = 4,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 18, 19, 701, DateTimeKind.Unspecified).AddTicks(5422),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Ic /Max/",
                            Symbol = "A",
                            Unit = "Ampers"
                        },
                        new
                        {
                            Id = 37,
                            ComponentTypeId = 4,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 18, 29, 307, DateTimeKind.Unspecified).AddTicks(9295),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Frequency",
                            Symbol = "Hz",
                            Unit = "Hertz"
                        },
                        new
                        {
                            Id = 38,
                            ComponentTypeId = 6,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 19, 29, 222, DateTimeKind.Unspecified).AddTicks(7478),
                            IsActive = true,
                            IsPrimary = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 19, 56, 807, DateTimeKind.Unspecified).AddTicks(2235),
                            Name = "Capacitance",
                            Symbol = "F",
                            Unit = "Farads"
                        },
                        new
                        {
                            Id = 39,
                            ComponentTypeId = 6,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 19, 39, 833, DateTimeKind.Unspecified).AddTicks(4955),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Tolerance",
                            Symbol = "%",
                            Unit = "Percents"
                        },
                        new
                        {
                            Id = 40,
                            ComponentTypeId = 6,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 19, 46, 85, DateTimeKind.Unspecified).AddTicks(804),
                            IsActive = true,
                            IsPrimary = false,
                            Name = "Max Voltage",
                            Symbol = "V",
                            Unit = "Volts"
                        },
                        new
                        {
                            Id = 41,
                            ComponentTypeId = 9,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 21, 59, 3, DateTimeKind.Unspecified).AddTicks(2010),
                            IsActive = true,
                            IsPrimary = true,
                            Name = "Frequency",
                            Symbol = "Hz",
                            Unit = "Hertz"
                        });
                });

            modelBuilder.Entity("SCManager.Data.Models.RequestLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.Property<string>("QueryString")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("RequestLogEntries");
                });

            modelBuilder.Entity("SCManager.Data.Models.StaticSiteInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("StaticSiteInfos");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Content = "<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Name</h3>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">SCManager</p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Description</h3>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">SCManager is a semiconductors management application, that is directed for usage by electronics and electrician specialists, so they can keep track of what components they have in stash.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color:rgba(255, 255, 255, 1);\">It can also be used in some warehouses/repair shops.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, Helvetica, Arial, sans-serif;\">Project github url:&nbsp;</span><a href=\"https://github.com/rz-georgiev/SCManager\">https://github.com/rz-georgiev/SCManager</a></p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">About</h3>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">This project will be used as a <strong>diploma work</strong> and for a <strong>CV upgrade.</strong></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Supervisor: Associate Professor Dr. Lyudmila Dimitrova</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1);\"><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, Helvetica, Arial, sans-serif;\">Head of a master's program:&nbsp;</span><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Associate Professor Dr.</span><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp;Stanislav Simeonov</span></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Head of department:&nbsp;</span><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Associate Professor Dr.</span><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">&nbsp;Veselina Bureva</span></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px;\">Graduate: Radoslav Georgiev</span></p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Installation</h3>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Download the project and start the solution.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Create a profile and get a private key from&nbsp;<a style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" href=\"https://sendgrid.com/\">https://sendgrid.com/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Create a profile and get a private key from <a style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" href=\"https://cloudinary.com/\">https://cloudinary.com/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Now replace these keys in your appsettings.json file.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">The application will automatically apply the migrations and the sample data seeding for you, so just build and run the solution.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, Helvetica, Arial, sans-serif;\">Note: First launch can be a little bit slow, because of the database creation and the data seeding.</span></p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Technologies:</h3>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* .NET Core 3.1</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* Entity Framework Core</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* AutoMapper</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* BuildBundlerMinifier</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* Cloudinary.Core</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* HtmlSanitizer</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* Bootstrap</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* SendGrid</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* Chart.js</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* Datatables.js</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* JQuery</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* ML.NET for the Bayesian analysis</span></p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Features</h3>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* Enabled ASP.NET Core Identity authentication [extended via ApplicationUser class]</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* Enabled auto-generation of antiforgery token for each post request.</span></p>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">* Enabled by default - protection from XSS attacks via the HTML Razor symbol escape operations</span></p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125;\">Usage</h3>\r\n<p><strong style=\"color: rgba(74, 74, 74, 1);\">User profile:</strong></p>\r\n<p><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">You can change your profile picture, email and password.</span></p>\r\n<p><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">You can also download your personal data in a .json file format.</span></p>\r\n<p><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">There is a option to delete your account and all related data to it.</span></p>\r\n<p><span style=\"color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">In the Two-factor authentication tab, you can configure an authenticator app via a QR code or a private key, so when you login, you will have an additional layer of security.</span></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); background-color: rgba(255, 255, 255, 1);\"><strong>Dashboard: </strong></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">You can see how many components you have in total of each type and what percentage it takes from the total components count [via a progress bar].</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">In the top right of the progress bar there is a total price for all the components of the type.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">In the bottom there is a chart which shows you also the total price for each component type.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><strong>My components:</strong></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Here you can add a new component and fill it with Quantites, Unit price and all other properties associated with it.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubun tu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Also you can see in a nice card menu all components you have and their basic information.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><strong>Bayesian analysis TODO:</strong></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">###</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><strong>Admin panel:</strong></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Displayed in a neat fully functional tables, you can manage the Users roles,</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); background-color: rgba(255, 255, 255, 1);\">create/edit component types, create/edit unit multipliers and also edit the site Privacy and About tabs information.</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">To see and use the Admin panel you need to authorized and have the according roles [\"Administrator\"].</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><strong>Privacy policy:</strong></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">There you can read all needed information about the GDPR agreements and your user rights. [Theres is an GDPR agreement option when you first visit the website].</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><strong>About:&nbsp;</strong></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Well, this is the page you are currently reading.</p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Support</h3>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Post your questions to scmanager_test[at]mail[dot]com</p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Contributing</h3>\r\n<p><span style=\"color: rgba(52, 73, 94, 1);\">Just copy the project a nd have fun</span></p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Authors and acknowledgment</h3>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><span style=\"color: rgba(52, 73, 94, 1);\">Special thanks to:</span></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a href=\"https://www.microsoft.com/en-us\">https://www.microsoft.com/en-us</a></p>\r\n<p style=\"margin: 1em 0 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a href=\"https://startbootstrap.com/themes/sb-admin-2/\">https://startbootstrap.com/themes/sb-admin-2/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a href=\"https://github.com/StartBootstrap/startbootstrap-sb-admin-2\">https://github.com/StartBootstrap/startbootstrap-sb-admin-2</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" href=\"https://sendgrid.com/\">https://sendgrid.com/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" href=\"https://cloudinary.com/\">https://cloudinary.com/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxyg en, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a href=\"https://github.com/mganss/HtmlSanitizer\">https://github.com/mganss/HtmlSanitizer</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1);\"><a href=\"https://www.chartjs.org/\">https://www.chartjs.org/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a href=\"https://datatables.net/\">https://datatables.net/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a href=\"https://fontawesome.com/\">https://fontawesome.com/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a href=\"https://www.tiny.cloud/\">https://www.tiny.cloud/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><a href=\"https://jquery.com/\">https://jquery.com/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); background-color: rgba(255, 255, 255, 1);\"><a href=\"https://getbootstrap.com/\">https://getbootstrap.com/</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); background-color: rgba(255, 255, 255, 1);\"><a href=\"https://www.freepik.com/free-photos-vectors/web-banner\">https://www.freepik.com/free-photos-vectors/web-banner</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); background-color: rgba(255, 255, 255, 1);\"><a href=\"https://undraw.co/illustrations\">https://undraw.co/illustrations</a></p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">Me: R. Georgiev</p>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\">&nbsp;</p>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">License</h3>\r\n<pre style=\"overflow: auto; font-family: Consolas, Monaco, Courier, monospace; font-size: 14px; background-color: rgba(255, 255, 255, 1); border: 1px solid rgba(238, 238, 238, 1); border-radius: 3px; padding: 20px; color: rgba(92, 88, 85, 1);\">MIT License\r\n\r\nCopyright (c) [2020] [SCManager]\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restric\r\ntion, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so\r\n, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\",WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHE\r\nR IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.</pre>\r\n<h3 style=\"margin: 1em 0 1.5rem; padding: 0; font-size: 1.5rem; color: rgba(54, 54, 54, 1); line-height: 1.125; font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgba(255, 255, 255, 1);\">Project status</h3>\r\n<p style=\"margin: 1em 0 0; padding: 0; color: rgba(74, 74, 74, 1); font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 16px; background-color: rgba(255, 255, 255, 1);\"><span style=\"color: rgba(52, 73, 94, 1);\">Currently in development.</span></p>",
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 33, 13, 892, DateTimeKind.Unspecified).AddTicks(3650),
                            Name = "About"
                        },
                        new
                        {
                            Id = 6,
                            Content = "<p>Your privacy is important to us. It is SCManager's policy to respect your privacy regarding any information we may collect from you across our website, <a href=\"http://www.scmanager.com/\">http://www.scmanager.com/</a>, and other sites we\r\n own and operate.</p>\r\n<p>We only ask for personal information when we truly need it to provide a service to you. We collect it by fair and lawful means, with your knowledge and consent. We also let you know why we&rsquo;re collecting it and how it will be used.</p>\r\n<p>We only retain collected information for as long as necessary to provide you with your requested service. What data we store, we&rsquo;ll protect within commercially acceptable means to prevent loss and theft, as well as unauthorized access, disclosure, copying, use or modification.</p>\r\n<p>We don&rsquo;t share any personally identifying information publicly or with third-parties, ex\r\ncept when required to by law.</p>\r\n<p>Our website may link to external sites that are not operated by us. Please be aware that we have no control over the content and practices of these sites, and cannot accept responsibility or liability for their respective privacy policies.</p>\r\n<p>You are free to refuse our request for your personal information, with the understanding that we may be unable to provide you with some of your desired services.</p>\r\n<p>Your continued use of our website will be regarded as acceptance of our practices around privacy and persona\r\nl information. If you have any questions about how we handle user data and personal information, feel free to contact us.</p>\r\n<p>&nbsp;</p>\r\n<p>This policy is effective as of 2 June 2020.</p>\r\n<p>&nbsp;</p>\r\n<p>Best regards,</p>\r\n<p>The SCManager team</p>\r\n<p>&nbsp;</p>\r\n<p><a title=\"Generate a free privacy policy\" href=\"https://getterms.io\">Privacy Policy created with GetTerms.</a></p>",
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Privacy"
                        });
                });

            modelBuilder.Entity("SCManager.Data.Models.UnitMultiplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("UnitMultipliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 12, 27, 55, 67, DateTimeKind.Unspecified).AddTicks(1817),
                            IsActive = true,
                            Name = " "
                        },
                        new
                        {
                            Id = 2,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 12, 43, 59, 239, DateTimeKind.Unspecified).AddTicks(5842),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 18, 12, 57, 50, 214, DateTimeKind.Unspecified).AddTicks(2519),
                            Name = "G"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 12, 45, 38, 708, DateTimeKind.Unspecified).AddTicks(5628),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 18, 12, 57, 57, 72, DateTimeKind.Unspecified).AddTicks(7780),
                            Name = "M"
                        },
                        new
                        {
                            Id = 6,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 12, 58, 50, 814, DateTimeKind.Unspecified).AddTicks(2703),
                            IsActive = true,
                            Name = "k"
                        },
                        new
                        {
                            Id = 7,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 12, 59, 14, 934, DateTimeKind.Unspecified).AddTicks(1223),
                            IsActive = true,
                            Name = "m"
                        },
                        new
                        {
                            Id = 8,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 12, 59, 39, 612, DateTimeKind.Unspecified).AddTicks(532),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 18, 14, 18, 52, 200, DateTimeKind.Unspecified).AddTicks(5528),
                            Name = "μ"
                        },
                        new
                        {
                            Id = 9,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 12, 59, 48, 972, DateTimeKind.Unspecified).AddTicks(5855),
                            IsActive = true,
                            Name = "p"
                        },
                        new
                        {
                            Id = 10,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 18, 12, 59, 51, 939, DateTimeKind.Unspecified).AddTicks(9064),
                            IsActive = true,
                            Name = "n"
                        });
                });

            modelBuilder.Entity("SCManager.Data.Models.UserComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.ToTable("UserComponentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComponentTypeId = 1,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 26, 28, 618, DateTimeKind.Unspecified).AddTicks(6808),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 29, 4, 40, DateTimeKind.Unspecified).AddTicks(4024),
                            Quantity = 10,
                            UnitPrice = 12.50m
                        },
                        new
                        {
                            Id = 2,
                            ComponentTypeId = 5,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 24, 180, DateTimeKind.Unspecified).AddTicks(4903),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 27, 36, 180, DateTimeKind.Unspecified).AddTicks(413),
                            Quantity = 50,
                            UnitPrice = 1.30m
                        },
                        new
                        {
                            Id = 3,
                            ComponentTypeId = 13,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 53, 939, DateTimeKind.Unspecified).AddTicks(6660),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 0, 58, DateTimeKind.Unspecified).AddTicks(3159),
                            Quantity = 5,
                            UnitPrice = 3.58m
                        },
                        new
                        {
                            Id = 4,
                            ComponentTypeId = 10,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 28, 18, 392, DateTimeKind.Unspecified).AddTicks(9670),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 26, 858, DateTimeKind.Unspecified).AddTicks(6889),
                            Quantity = 14,
                            UnitPrice = 0.63m
                        },
                        new
                        {
                            Id = 5,
                            ComponentTypeId = 9,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 28, 41, 437, DateTimeKind.Unspecified).AddTicks(1875),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 50, 520, DateTimeKind.Unspecified).AddTicks(2216),
                            Quantity = 60,
                            UnitPrice = 8.50m
                        });
                });

            modelBuilder.Entity("SCManager.Data.Models.UserComponentTypeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComponentTypeDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastUpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UnitMultiplierId")
                        .HasColumnType("int");

                    b.Property<int>("UserComponentTypeId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ComponentTypeDetailId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("UnitMultiplierId");

                    b.HasIndex("UserComponentTypeId");

                    b.ToTable("UserComponentTypeDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComponentTypeDetailId = 27,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 26, 28, 796, DateTimeKind.Unspecified).AddTicks(6621),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 29, 4, 40, DateTimeKind.Unspecified).AddTicks(9235),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 1,
                            Value = 10f
                        },
                        new
                        {
                            Id = 2,
                            ComponentTypeDetailId = 28,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 26, 28, 810, DateTimeKind.Unspecified).AddTicks(9060),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 29, 4, 40, DateTimeKind.Unspecified).AddTicks(9396),
                            UnitMultiplierId = 6,
                            UserComponentTypeId = 1,
                            Value = 5f
                        },
                        new
                        {
                            Id = 3,
                            ComponentTypeDetailId = 29,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 26, 28, 811, DateTimeKind.Unspecified).AddTicks(2774),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 29, 4, 40, DateTimeKind.Unspecified).AddTicks(9498),
                            UnitMultiplierId = 8,
                            UserComponentTypeId = 1,
                            Value = 17f
                        },
                        new
                        {
                            Id = 4,
                            ComponentTypeDetailId = 30,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 26, 28, 811, DateTimeKind.Unspecified).AddTicks(3637),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 29, 4, 40, DateTimeKind.Unspecified).AddTicks(9595),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 1,
                            Value = 20f
                        },
                        new
                        {
                            Id = 5,
                            ComponentTypeDetailId = 31,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 26, 28, 811, DateTimeKind.Unspecified).AddTicks(4291),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 29, 4, 40, DateTimeKind.Unspecified).AddTicks(9696),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 1,
                            Value = 13f
                        },
                        new
                        {
                            Id = 6,
                            ComponentTypeDetailId = 32,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 26, 28, 811, DateTimeKind.Unspecified).AddTicks(4935),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 29, 4, 40, DateTimeKind.Unspecified).AddTicks(9788),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 1,
                            Value = 4f
                        },
                        new
                        {
                            Id = 7,
                            ComponentTypeDetailId = 33,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 26, 28, 811, DateTimeKind.Unspecified).AddTicks(5515),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 29, 4, 40, DateTimeKind.Unspecified).AddTicks(9880),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 1,
                            Value = 5f
                        },
                        new
                        {
                            Id = 8,
                            ComponentTypeDetailId = 6,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 24, 189, DateTimeKind.Unspecified).AddTicks(8378),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 27, 36, 180, DateTimeKind.Unspecified).AddTicks(6478),
                            UnitMultiplierId = 6,
                            UserComponentTypeId = 2,
                            Value = 80f
                        },
                        new
                        {
                            Id = 9,
                            ComponentTypeDetailId = 7,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 24, 190, DateTimeKind.Unspecified).AddTicks(2853),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 27, 36, 180, DateTimeKind.Unspecified).AddTicks(6661),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 2,
                            Value = 50f
                        },
                        new
                        {
                            Id = 10,
                            ComponentTypeDetailId = 8,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 24, 190, DateTimeKind.Unspecified).AddTicks(6350),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 27, 36, 180, DateTimeKind.Unspecified).AddTicks(6746),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 2,
                            Value = 60f
                        },
                        new
                        {
                            Id = 11,
                            ComponentTypeDetailId = 9,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 24, 190, DateTimeKind.Unspecified).AddTicks(9247),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 27, 36, 180, DateTimeKind.Unspecified).AddTicks(6833),
                            UnitMultiplierId = 7,
                            UserComponentTypeId = 2,
                            Value = 70f
                        },
                        new
                        {
                            Id = 12,
                            ComponentTypeDetailId = 10,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 53, 944, DateTimeKind.Unspecified).AddTicks(418),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 0, 59, DateTimeKind.Unspecified).AddTicks(81),
                            UnitMultiplierId = 3,
                            UserComponentTypeId = 3,
                            Value = 10f
                        },
                        new
                        {
                            Id = 13,
                            ComponentTypeDetailId = 11,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 53, 944, DateTimeKind.Unspecified).AddTicks(2552),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 0, 59, DateTimeKind.Unspecified).AddTicks(300),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 3,
                            Value = 0f
                        },
                        new
                        {
                            Id = 14,
                            ComponentTypeDetailId = 12,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 27, 53, 944, DateTimeKind.Unspecified).AddTicks(3812),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 0, 59, DateTimeKind.Unspecified).AddTicks(405),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 3,
                            Value = 0f
                        },
                        new
                        {
                            Id = 15,
                            ComponentTypeDetailId = 20,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 28, 18, 401, DateTimeKind.Unspecified).AddTicks(4599),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 26, 860, DateTimeKind.Unspecified).AddTicks(1781),
                            UnitMultiplierId = 7,
                            UserComponentTypeId = 4,
                            Value = 50f
                        },
                        new
                        {
                            Id = 16,
                            ComponentTypeDetailId = 21,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 28, 18, 401, DateTimeKind.Unspecified).AddTicks(5681),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 26, 860, DateTimeKind.Unspecified).AddTicks(2167),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 4,
                            Value = 60f
                        },
                        new
                        {
                            Id = 17,
                            ComponentTypeDetailId = 22,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 28, 18, 401, DateTimeKind.Unspecified).AddTicks(6136),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 26, 860, DateTimeKind.Unspecified).AddTicks(2269),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 4,
                            Value = 110f
                        },
                        new
                        {
                            Id = 18,
                            ComponentTypeDetailId = 23,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 28, 18, 401, DateTimeKind.Unspecified).AddTicks(6559),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 26, 860, DateTimeKind.Unspecified).AddTicks(2397),
                            UnitMultiplierId = 1,
                            UserComponentTypeId = 4,
                            Value = 120f
                        },
                        new
                        {
                            Id = 19,
                            ComponentTypeDetailId = 41,
                            CreatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            CreatedDateTime = new DateTime(2020, 6, 19, 19, 28, 41, 451, DateTimeKind.Unspecified).AddTicks(3311),
                            IsActive = true,
                            LastUpdatedByUserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            LastUpdatedDateTime = new DateTime(2020, 6, 19, 19, 28, 50, 520, DateTimeKind.Unspecified).AddTicks(8694),
                            UnitMultiplierId = 3,
                            UserComponentTypeId = 5,
                            Value = 64f
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SCManager.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SCManager.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SCManager.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SCManager.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("SCManager.Data.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("SCManager.Data.Models.ComponentType", b =>
                {
                    b.HasOne("SCManager.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("SCManager.Data.Models.ComponentTypeDetail", b =>
                {
                    b.HasOne("SCManager.Data.Models.ComponentType", "ComponentType")
                        .WithMany("Details")
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.Navigation("ComponentType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("SCManager.Data.Models.StaticSiteInfo", b =>
                {
                    b.HasOne("SCManager.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("SCManager.Data.Models.UnitMultiplier", b =>
                {
                    b.HasOne("SCManager.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("SCManager.Data.Models.UserComponentType", b =>
                {
                    b.HasOne("SCManager.Data.Models.ComponentType", "ComponentType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.Navigation("ComponentType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");
                });

            modelBuilder.Entity("SCManager.Data.Models.UserComponentTypeDetail", b =>
                {
                    b.HasOne("SCManager.Data.Models.ComponentTypeDetail", "ComponentTypeDetail")
                        .WithMany()
                        .HasForeignKey("ComponentTypeDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.ApplicationUser", "LastUpdatedByUser")
                        .WithMany()
                        .HasForeignKey("LastUpdatedByUserId");

                    b.HasOne("SCManager.Data.Models.UnitMultiplier", "UnitMultiplier")
                        .WithMany()
                        .HasForeignKey("UnitMultiplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SCManager.Data.Models.UserComponentType", "ComponentType")
                        .WithMany("Details")
                        .HasForeignKey("UserComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentType");

                    b.Navigation("ComponentTypeDetail");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("UnitMultiplier");
                });

            modelBuilder.Entity("SCManager.Data.Models.ComponentType", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("SCManager.Data.Models.UserComponentType", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
